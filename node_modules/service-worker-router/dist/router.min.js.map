{"version":3,"file":"router.min.js","sources":["../node_modules/url-pattern/lib/url-pattern.js","../src/router.ts"],"sourcesContent":["// Generated by CoffeeScript 1.10.0\nvar slice = [].slice;\n\n(function(root, factory) {\n  if (('function' === typeof define) && (define.amd != null)) {\n    return define([], factory);\n  } else if (typeof exports !== \"undefined\" && exports !== null) {\n    return module.exports = factory();\n  } else {\n    return root.UrlPattern = factory();\n  }\n})(this, function() {\n  var P, UrlPattern, astNodeContainsSegmentsForProvidedParams, astNodeToNames, astNodeToRegexString, baseAstNodeToRegexString, concatMap, defaultOptions, escapeForRegex, getParam, keysAndValuesToObject, newParser, regexGroupCount, stringConcatMap, stringify;\n  escapeForRegex = function(string) {\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  };\n  concatMap = function(array, f) {\n    var i, length, results;\n    results = [];\n    i = -1;\n    length = array.length;\n    while (++i < length) {\n      results = results.concat(f(array[i]));\n    }\n    return results;\n  };\n  stringConcatMap = function(array, f) {\n    var i, length, result;\n    result = '';\n    i = -1;\n    length = array.length;\n    while (++i < length) {\n      result += f(array[i]);\n    }\n    return result;\n  };\n  regexGroupCount = function(regex) {\n    return (new RegExp(regex.toString() + '|')).exec('').length - 1;\n  };\n  keysAndValuesToObject = function(keys, values) {\n    var i, key, length, object, value;\n    object = {};\n    i = -1;\n    length = keys.length;\n    while (++i < length) {\n      key = keys[i];\n      value = values[i];\n      if (value == null) {\n        continue;\n      }\n      if (object[key] != null) {\n        if (!Array.isArray(object[key])) {\n          object[key] = [object[key]];\n        }\n        object[key].push(value);\n      } else {\n        object[key] = value;\n      }\n    }\n    return object;\n  };\n  P = {};\n  P.Result = function(value, rest) {\n    this.value = value;\n    this.rest = rest;\n  };\n  P.Tagged = function(tag, value) {\n    this.tag = tag;\n    this.value = value;\n  };\n  P.tag = function(tag, parser) {\n    return function(input) {\n      var result, tagged;\n      result = parser(input);\n      if (result == null) {\n        return;\n      }\n      tagged = new P.Tagged(tag, result.value);\n      return new P.Result(tagged, result.rest);\n    };\n  };\n  P.regex = function(regex) {\n    return function(input) {\n      var matches, result;\n      matches = regex.exec(input);\n      if (matches == null) {\n        return;\n      }\n      result = matches[0];\n      return new P.Result(result, input.slice(result.length));\n    };\n  };\n  P.sequence = function() {\n    var parsers;\n    parsers = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return function(input) {\n      var i, length, parser, rest, result, values;\n      i = -1;\n      length = parsers.length;\n      values = [];\n      rest = input;\n      while (++i < length) {\n        parser = parsers[i];\n        result = parser(rest);\n        if (result == null) {\n          return;\n        }\n        values.push(result.value);\n        rest = result.rest;\n      }\n      return new P.Result(values, rest);\n    };\n  };\n  P.pick = function() {\n    var indexes, parsers;\n    indexes = arguments[0], parsers = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    return function(input) {\n      var array, result;\n      result = P.sequence.apply(P, parsers)(input);\n      if (result == null) {\n        return;\n      }\n      array = result.value;\n      result.value = array[indexes];\n      return result;\n    };\n  };\n  P.string = function(string) {\n    var length;\n    length = string.length;\n    return function(input) {\n      if (input.slice(0, length) === string) {\n        return new P.Result(string, input.slice(length));\n      }\n    };\n  };\n  P.lazy = function(fn) {\n    var cached;\n    cached = null;\n    return function(input) {\n      if (cached == null) {\n        cached = fn();\n      }\n      return cached(input);\n    };\n  };\n  P.baseMany = function(parser, end, stringResult, atLeastOneResultRequired, input) {\n    var endResult, parserResult, rest, results;\n    rest = input;\n    results = stringResult ? '' : [];\n    while (true) {\n      if (end != null) {\n        endResult = end(rest);\n        if (endResult != null) {\n          break;\n        }\n      }\n      parserResult = parser(rest);\n      if (parserResult == null) {\n        break;\n      }\n      if (stringResult) {\n        results += parserResult.value;\n      } else {\n        results.push(parserResult.value);\n      }\n      rest = parserResult.rest;\n    }\n    if (atLeastOneResultRequired && results.length === 0) {\n      return;\n    }\n    return new P.Result(results, rest);\n  };\n  P.many1 = function(parser) {\n    return function(input) {\n      return P.baseMany(parser, null, false, true, input);\n    };\n  };\n  P.concatMany1Till = function(parser, end) {\n    return function(input) {\n      return P.baseMany(parser, end, true, true, input);\n    };\n  };\n  P.firstChoice = function() {\n    var parsers;\n    parsers = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n    return function(input) {\n      var i, length, parser, result;\n      i = -1;\n      length = parsers.length;\n      while (++i < length) {\n        parser = parsers[i];\n        result = parser(input);\n        if (result != null) {\n          return result;\n        }\n      }\n    };\n  };\n  newParser = function(options) {\n    var U;\n    U = {};\n    U.wildcard = P.tag('wildcard', P.string(options.wildcardChar));\n    U.optional = P.tag('optional', P.pick(1, P.string(options.optionalSegmentStartChar), P.lazy(function() {\n      return U.pattern;\n    }), P.string(options.optionalSegmentEndChar)));\n    U.name = P.regex(new RegExp(\"^[\" + options.segmentNameCharset + \"]+\"));\n    U.named = P.tag('named', P.pick(1, P.string(options.segmentNameStartChar), P.lazy(function() {\n      return U.name;\n    })));\n    U.escapedChar = P.pick(1, P.string(options.escapeChar), P.regex(/^./));\n    U[\"static\"] = P.tag('static', P.concatMany1Till(P.firstChoice(P.lazy(function() {\n      return U.escapedChar;\n    }), P.regex(/^./)), P.firstChoice(P.string(options.segmentNameStartChar), P.string(options.optionalSegmentStartChar), P.string(options.optionalSegmentEndChar), U.wildcard)));\n    U.token = P.lazy(function() {\n      return P.firstChoice(U.wildcard, U.optional, U.named, U[\"static\"]);\n    });\n    U.pattern = P.many1(P.lazy(function() {\n      return U.token;\n    }));\n    return U;\n  };\n  defaultOptions = {\n    escapeChar: '\\\\',\n    segmentNameStartChar: ':',\n    segmentValueCharset: 'a-zA-Z0-9-_~ %',\n    segmentNameCharset: 'a-zA-Z0-9',\n    optionalSegmentStartChar: '(',\n    optionalSegmentEndChar: ')',\n    wildcardChar: '*'\n  };\n  baseAstNodeToRegexString = function(astNode, segmentValueCharset) {\n    if (Array.isArray(astNode)) {\n      return stringConcatMap(astNode, function(node) {\n        return baseAstNodeToRegexString(node, segmentValueCharset);\n      });\n    }\n    switch (astNode.tag) {\n      case 'wildcard':\n        return '(.*?)';\n      case 'named':\n        return \"([\" + segmentValueCharset + \"]+)\";\n      case 'static':\n        return escapeForRegex(astNode.value);\n      case 'optional':\n        return '(?:' + baseAstNodeToRegexString(astNode.value, segmentValueCharset) + ')?';\n    }\n  };\n  astNodeToRegexString = function(astNode, segmentValueCharset) {\n    if (segmentValueCharset == null) {\n      segmentValueCharset = defaultOptions.segmentValueCharset;\n    }\n    return '^' + baseAstNodeToRegexString(astNode, segmentValueCharset) + '$';\n  };\n  astNodeToNames = function(astNode) {\n    if (Array.isArray(astNode)) {\n      return concatMap(astNode, astNodeToNames);\n    }\n    switch (astNode.tag) {\n      case 'wildcard':\n        return ['_'];\n      case 'named':\n        return [astNode.value];\n      case 'static':\n        return [];\n      case 'optional':\n        return astNodeToNames(astNode.value);\n    }\n  };\n  getParam = function(params, key, nextIndexes, sideEffects) {\n    var index, maxIndex, result, value;\n    if (sideEffects == null) {\n      sideEffects = false;\n    }\n    value = params[key];\n    if (value == null) {\n      if (sideEffects) {\n        throw new Error(\"no values provided for key `\" + key + \"`\");\n      } else {\n        return;\n      }\n    }\n    index = nextIndexes[key] || 0;\n    maxIndex = Array.isArray(value) ? value.length - 1 : 0;\n    if (index > maxIndex) {\n      if (sideEffects) {\n        throw new Error(\"too few values provided for key `\" + key + \"`\");\n      } else {\n        return;\n      }\n    }\n    result = Array.isArray(value) ? value[index] : value;\n    if (sideEffects) {\n      nextIndexes[key] = index + 1;\n    }\n    return result;\n  };\n  astNodeContainsSegmentsForProvidedParams = function(astNode, params, nextIndexes) {\n    var i, length;\n    if (Array.isArray(astNode)) {\n      i = -1;\n      length = astNode.length;\n      while (++i < length) {\n        if (astNodeContainsSegmentsForProvidedParams(astNode[i], params, nextIndexes)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    switch (astNode.tag) {\n      case 'wildcard':\n        return getParam(params, '_', nextIndexes, false) != null;\n      case 'named':\n        return getParam(params, astNode.value, nextIndexes, false) != null;\n      case 'static':\n        return false;\n      case 'optional':\n        return astNodeContainsSegmentsForProvidedParams(astNode.value, params, nextIndexes);\n    }\n  };\n  stringify = function(astNode, params, nextIndexes) {\n    if (Array.isArray(astNode)) {\n      return stringConcatMap(astNode, function(node) {\n        return stringify(node, params, nextIndexes);\n      });\n    }\n    switch (astNode.tag) {\n      case 'wildcard':\n        return getParam(params, '_', nextIndexes, true);\n      case 'named':\n        return getParam(params, astNode.value, nextIndexes, true);\n      case 'static':\n        return astNode.value;\n      case 'optional':\n        if (astNodeContainsSegmentsForProvidedParams(astNode.value, params, nextIndexes)) {\n          return stringify(astNode.value, params, nextIndexes);\n        } else {\n          return '';\n        }\n    }\n  };\n  UrlPattern = function(arg1, arg2) {\n    var groupCount, options, parsed, parser, withoutWhitespace;\n    if (arg1 instanceof UrlPattern) {\n      this.isRegex = arg1.isRegex;\n      this.regex = arg1.regex;\n      this.ast = arg1.ast;\n      this.names = arg1.names;\n      return;\n    }\n    this.isRegex = arg1 instanceof RegExp;\n    if (!(('string' === typeof arg1) || this.isRegex)) {\n      throw new TypeError('argument must be a regex or a string');\n    }\n    if (this.isRegex) {\n      this.regex = arg1;\n      if (arg2 != null) {\n        if (!Array.isArray(arg2)) {\n          throw new Error('if first argument is a regex the second argument may be an array of group names but you provided something else');\n        }\n        groupCount = regexGroupCount(this.regex);\n        if (arg2.length !== groupCount) {\n          throw new Error(\"regex contains \" + groupCount + \" groups but array of group names contains \" + arg2.length);\n        }\n        this.names = arg2;\n      }\n      return;\n    }\n    if (arg1 === '') {\n      throw new Error('argument must not be the empty string');\n    }\n    withoutWhitespace = arg1.replace(/\\s+/g, '');\n    if (withoutWhitespace !== arg1) {\n      throw new Error('argument must not contain whitespace');\n    }\n    options = {\n      escapeChar: (arg2 != null ? arg2.escapeChar : void 0) || defaultOptions.escapeChar,\n      segmentNameStartChar: (arg2 != null ? arg2.segmentNameStartChar : void 0) || defaultOptions.segmentNameStartChar,\n      segmentNameCharset: (arg2 != null ? arg2.segmentNameCharset : void 0) || defaultOptions.segmentNameCharset,\n      segmentValueCharset: (arg2 != null ? arg2.segmentValueCharset : void 0) || defaultOptions.segmentValueCharset,\n      optionalSegmentStartChar: (arg2 != null ? arg2.optionalSegmentStartChar : void 0) || defaultOptions.optionalSegmentStartChar,\n      optionalSegmentEndChar: (arg2 != null ? arg2.optionalSegmentEndChar : void 0) || defaultOptions.optionalSegmentEndChar,\n      wildcardChar: (arg2 != null ? arg2.wildcardChar : void 0) || defaultOptions.wildcardChar\n    };\n    parser = newParser(options);\n    parsed = parser.pattern(arg1);\n    if (parsed == null) {\n      throw new Error(\"couldn't parse pattern\");\n    }\n    if (parsed.rest !== '') {\n      throw new Error(\"could only partially parse pattern\");\n    }\n    this.ast = parsed.value;\n    this.regex = new RegExp(astNodeToRegexString(this.ast, options.segmentValueCharset));\n    this.names = astNodeToNames(this.ast);\n  };\n  UrlPattern.prototype.match = function(url) {\n    var groups, match;\n    match = this.regex.exec(url);\n    if (match == null) {\n      return null;\n    }\n    groups = match.slice(1);\n    if (this.names) {\n      return keysAndValuesToObject(this.names, groups);\n    } else {\n      return groups;\n    }\n  };\n  UrlPattern.prototype.stringify = function(params) {\n    if (params == null) {\n      params = {};\n    }\n    if (this.isRegex) {\n      throw new Error(\"can't stringify patterns generated from a regex\");\n    }\n    if (params !== Object(params)) {\n      throw new Error(\"argument must be an object or undefined\");\n    }\n    return stringify(this.ast, params, {});\n  };\n  UrlPattern.escapeForRegex = escapeForRegex;\n  UrlPattern.concatMap = concatMap;\n  UrlPattern.stringConcatMap = stringConcatMap;\n  UrlPattern.regexGroupCount = regexGroupCount;\n  UrlPattern.keysAndValuesToObject = keysAndValuesToObject;\n  UrlPattern.P = P;\n  UrlPattern.newParser = newParser;\n  UrlPattern.defaultOptions = defaultOptions;\n  UrlPattern.astNodeToRegexString = astNodeToRegexString;\n  UrlPattern.astNodeToNames = astNodeToNames;\n  UrlPattern.getParam = getParam;\n  UrlPattern.astNodeContainsSegmentsForProvidedParams = astNodeContainsSegmentsForProvidedParams;\n  UrlPattern.stringify = stringify;\n  return UrlPattern;\n});\n","import UrlPattern from 'url-pattern'\n\n// https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\nexport { UrlPattern }\n\nconst patternOpts = {\n  segmentNameCharset: 'a-zA-Z0-9_-',\n  segmentValueCharset: 'a-zA-Z0-9@.+-_'\n}\n\nexport type HandlerPromise = Promise<Response | any | void>\n\nexport type HandlerFunction = (...args: any[]) => HandlerPromise\n\nexport interface HandlerContext extends MatchResult {}\n\nexport interface RouteOptions {\n  method?: string\n  matchUrl?: boolean\n}\n\nexport interface Route {\n  pattern: UrlPattern\n  handler: HandlerFunction\n  options: RouteOptions\n}\n\nexport interface MatchResult {\n  params: any | null\n  handler: HandlerFunction\n  url: URL\n  method: string\n  route: Route\n  request?: Request\n  event?: FetchEvent\n}\n\nexport interface HandleResult {\n  match: MatchResult\n  handlerPromise: HandlerPromise\n}\n\nexport class Router {\n  private routes: Array<Route> = []\n\n  public all (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: '' })\n  }\n  public get (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: 'GET' })\n  }\n  public post (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: 'POST' })\n  }\n  public put (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: 'PUT' })\n  }\n  public patch (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: 'PATCH' })\n  }\n  public delete (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: 'DELETE' })\n  }\n  public head (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: 'HEAD' })\n  }\n  public options (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    return this.addRoute(pattern, handler, { ...options, method: 'OPTIONS' })\n  }\n\n  private addRoute (\n    pattern: string | UrlPattern,\n    handler: HandlerFunction,\n    options: RouteOptions = {}\n  ): Router {\n    if (!(pattern instanceof UrlPattern)) {\n      pattern = new UrlPattern(pattern, patternOpts)\n    }\n    this.routes.push({ pattern, handler, options })\n    return this\n  }\n\n  public match (url: URL | string, method: string): MatchResult | null {\n    if (!(url instanceof URL)) {\n      url = url.startsWith('/') ? new URL(`http://domain${url}`) : new URL(url)\n    }\n    for (const route of this.routes) {\n      const { pattern, options, handler } = route\n      if (options.method && options.method !== method) continue\n      const params = pattern.match(options.matchUrl ? url.href : url.pathname)\n      if (params) return { params, handler, url, method, route }\n    }\n    return null\n  }\n\n  public matchRequest (request: Request): MatchResult | null {\n    return this.match(request.url, request.method)\n  }\n\n  public matchEvent (event: FetchEvent): MatchResult | null {\n    return this.matchRequest(event.request)\n  }\n\n  public handle (url: URL | string, method: string): HandleResult | null {\n    const match = this.match(url, method)\n    if (!match) return null\n    const context = { ...match }\n    const handlerPromise = match.handler(context as HandlerContext)\n    return { handlerPromise, match: context }\n  }\n\n  public handleRequest (request: Request): HandleResult | null {\n    const match = this.matchRequest(request)\n    if (!match) return null\n    const context = { ...match, request } as HandlerContext\n    const handlerPromise = match.handler(context)\n    return { handlerPromise, match: context }\n  }\n\n  public handleEvent (event: FetchEvent): HandleResult | null {\n    const request = event.request\n    const match = this.matchRequest(request)\n    if (!match) return null\n    const context = { ...match, request, event } as HandlerContext\n    const handlerPromise = match.handler(context)\n    event.respondWith(handlerPromise)\n    return { handlerPromise, match: context }\n  }\n\n  public clear () {\n    this.routes.length = 0\n  }\n}\n"],"names":["root","factory","slice","this","P","UrlPattern","astNodeContainsSegmentsForProvidedParams","astNodeToNames","astNodeToRegexString","baseAstNodeToRegexString","concatMap","defaultOptions","escapeForRegex","getParam","keysAndValuesToObject","newParser","regexGroupCount","stringConcatMap","stringify","string","replace","array","f","i","length","results","concat","result","regex","RegExp","toString","exec","keys","values","key","object","value","Array","isArray","push","Result","rest","Tagged","tag","parser","input","tagged","matches","sequence","parsers","arguments","call","pick","indexes","apply","lazy","fn","cached","baseMany","end","stringResult","atLeastOneResultRequired","parserResult","many1","concatMany1Till","firstChoice","options","U","wildcard","wildcardChar","optional","optionalSegmentStartChar","pattern","optionalSegmentEndChar","name","segmentNameCharset","named","segmentNameStartChar","escapedChar","escapeChar","token","segmentValueCharset","astNode","node","params","nextIndexes","sideEffects","index","Error","arg1","arg2","groupCount","parsed","isRegex","ast","names","TypeError","prototype","match","url","groups","Object","exports","module","patternOpts","Router","handler","addRoute","method","routes","URL","startsWith","_a","_i","route","matchUrl","href","pathname","request","event","matchRequest","context","handlerPromise","__assign","respondWith"],"mappings":"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"}