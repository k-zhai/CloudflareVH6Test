/*!
 * service-worker-router v1.7.1 by berstend
 * https://github.com/berstend/service-worker-router#readme
 * @license MIT
 */
import UrlPattern from 'url-pattern';
export { default as UrlPattern } from 'url-pattern';

const __assign = Object.assign || function (target) {
    for (var source, i = 1; i < arguments.length; i++) {
        source = arguments[i];
        for (var prop in source) {
            if (Object.prototype.hasOwnProperty.call(source, prop)) {
                target[prop] = source[prop];
            }
        }
    }
    return target;
};

var patternOpts = {
    segmentNameCharset: 'a-zA-Z0-9_-',
    segmentValueCharset: 'a-zA-Z0-9@.+-_'
};
var Router = /** @class */ (function () {
    function Router() {
        this.routes = [];
    }
    Router.prototype.all = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: '' }));
    };
    Router.prototype.get = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: 'GET' }));
    };
    Router.prototype.post = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: 'POST' }));
    };
    Router.prototype.put = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: 'PUT' }));
    };
    Router.prototype.patch = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: 'PATCH' }));
    };
    Router.prototype["delete"] = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: 'DELETE' }));
    };
    Router.prototype.head = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: 'HEAD' }));
    };
    Router.prototype.options = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        return this.addRoute(pattern, handler, __assign({}, options, { method: 'OPTIONS' }));
    };
    Router.prototype.addRoute = function (pattern, handler, options) {
        if (options === void 0) { options = {}; }
        if (!(pattern instanceof UrlPattern)) {
            pattern = new UrlPattern(pattern, patternOpts);
        }
        this.routes.push({ pattern: pattern, handler: handler, options: options });
        return this;
    };
    Router.prototype.match = function (url, method) {
        if (!(url instanceof URL)) {
            url = url.startsWith('/') ? new URL("http://domain" + url) : new URL(url);
        }
        for (var _i = 0, _a = this.routes; _i < _a.length; _i++) {
            var route = _a[_i];
            var pattern = route.pattern, options = route.options, handler = route.handler;
            if (options.method && options.method !== method)
                continue;
            var params = pattern.match(options.matchUrl ? url.href : url.pathname);
            if (params)
                return { params: params, handler: handler, url: url, method: method, route: route };
        }
        return null;
    };
    Router.prototype.matchRequest = function (request) {
        return this.match(request.url, request.method);
    };
    Router.prototype.matchEvent = function (event) {
        return this.matchRequest(event.request);
    };
    Router.prototype.handle = function (url, method) {
        var match = this.match(url, method);
        if (!match)
            return null;
        var context = __assign({}, match);
        var handlerPromise = match.handler(context);
        return { handlerPromise: handlerPromise, match: context };
    };
    Router.prototype.handleRequest = function (request) {
        var match = this.matchRequest(request);
        if (!match)
            return null;
        var context = __assign({}, match, { request: request });
        var handlerPromise = match.handler(context);
        return { handlerPromise: handlerPromise, match: context };
    };
    Router.prototype.handleEvent = function (event) {
        var request = event.request;
        var match = this.matchRequest(request);
        if (!match)
            return null;
        var context = __assign({}, match, { request: request, event: event });
        var handlerPromise = match.handler(context);
        event.respondWith(handlerPromise);
        return { handlerPromise: handlerPromise, match: context };
    };
    Router.prototype.clear = function () {
        this.routes.length = 0;
    };
    return Router;
}());

export { Router };
//# sourceMappingURL=router.mjs.map
